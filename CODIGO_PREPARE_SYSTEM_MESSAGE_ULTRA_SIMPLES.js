// Vers√£o que inclui trilhas no contexto
// Esta vers√£o busca trilhas dispon√≠veis e adiciona ao system message

// Coletar todos os inputs dispon√≠veis
const allInputs = $input.all();

// Inicializar vari√°veis
let sentimento = 'neutro';
let intensidade = 0.5;
let messageText = '';
let from = '';
let channel = 'whatsapp';
let tenantId = '';
let conversationHistory = [];

// Extrair dados dos inputs
if (allInputs && allInputs.length > 0) {
  for (let input of allInputs) {
    // Buscar sentimento
    if (input.json.sentimento) {
      sentimento = input.json.sentimento;
    }
    if (input.json.intensidade) {
      intensidade = input.json.intensidade;
    }
    
    // Buscar dados da mensagem
    if (input.json.messageText) {
      messageText = input.json.messageText;
    }
    if (input.json.from) {
      from = input.json.from;
    }
    if (input.json.channel) {
      channel = input.json.channel;
    }
    if (input.json.tenantId) {
      tenantId = input.json.tenantId;
    }
    
    // Buscar hist√≥rico
    if (input.json.messages) {
      conversationHistory = input.json.messages;
    }
  }
}

// ‚úÖ NOVO: Buscar trilhas dispon√≠veis do colaborador
let trilhasInfo = '';
let trilhasDisponiveis = [];
let backendUrl = 'http://localhost:3000'; // Padr√£o local

try {
  // Tentar obter URL do backend
  for (let input of allInputs) {
    if (input.json.url && input.json.url.includes('localhost') || input.json.url.includes('vercel')) {
      backendUrl = input.json.url;
      break;
    }
  }
  
  if (from && tenantId) {
    const response = await fetch(`${backendUrl}/api/agent-n8n/trilhas/disponiveis/${from}?tenant_id=${tenantId}`);
    if (response.ok) {
      const data = await response.json();
      trilhasDisponiveis = data.disponiveis || [];
      
      // Formatar informa√ß√µes das trilhas para o contexto
      if (trilhasDisponiveis.length > 0) {
        trilhasInfo = '\n\nüìö **TRILHAS DISPON√çVEIS PARA ESTE COLABORADOR:**\n\n';
        
        trilhasDisponiveis.forEach((trilha, index) => {
          trilhasInfo += `${index + 1}. **${trilha.nome}** (ID: ${trilha.id})\n`;
          if (trilha.descricao) {
            trilhasInfo += `   Descri√ß√£o: ${trilha.descricao}\n`;
          }
          if (trilha.conteudos_count) {
            trilhasInfo += `   Conte√∫dos: ${trilha.conteudos_count}\n`;
          }
          trilhasInfo += '\n';
        });
        
        trilhasInfo += '\n**IMPORTANTE:** Voc√™ conhece estas trilhas e pode us√°-las para responder perguntas e iniciar trilhas quando solicitado.';
      }
    }
  }
} catch (error) {
  console.log('‚ö†Ô∏è N√£o foi poss√≠vel buscar trilhas:', error.message);
  trilhasInfo = '\n\n‚ö†Ô∏è **NOTA:** Use a ferramenta buscar_trilhas_disponiveis quando o colaborador perguntar sobre trilhas.';
}

// Determinar tom
let tom = 'PROFISSIONAL e CLARO';
let emoji = '‚ú®';

switch(sentimento) {
  case 'muito_positivo':
    tom = 'ENTUSIASMADO e CELEBRATIVO';
    emoji = 'üéâ';
    break;
  case 'positivo':
    tom = 'MOTIVADOR e ENCORAJADOR';
    emoji = 'üëè';
    break;
  case 'negativo':
    tom = 'EMP√ÅTICO e COMPREENSIVO';
    emoji = 'ü§ù';
    break;
  case 'muito_negativo':
    tom = 'EXTREMAMENTE EMP√ÅTICO e ACOLHEDOR';
    emoji = 'üíô';
    break;
}

// Construir system message
const systemContent = `Voc√™ √© o **Navi**, um assistente de onboarding inteligente e proativo.

üéØ CONTEXTO: Colaborador ${from} | Sentimento: ${sentimento} | Hist√≥rico: ${conversationHistory.length} mensagens

üé≠ TOM DE VOZ: ${tom} ${emoji}

${trilhasInfo}

üéØ COMPORTAMENTO RELACIONAL (MUITO IMPORTANTE):
- SEMPRE demonstre interesse genu√≠no quando o colaborador compartilhar informa√ß√µes pessoais
- Fa√ßa perguntas de follow-up sobre interesses, hobbies, experi√™ncias
- N√ÉO mude abruptamente de assunto quando o colaborador estiver compartilhando algo pessoal
- Se o colaborador mencionar hobbies/interesses:
  * Fa√ßa pelo menos 2-3 perguntas relacionadas
  * Demonstre curiosidade genu√≠na
  * Conecte-se emocionalmente ANTES de sugerir trilhas
- O OBJETIVO √© criar conex√£o humana ANTES de direcionar para tarefas

${sentimento.includes('negativo') ? `
‚ö†Ô∏è ATEN√á√ÉO - SENTIMENTO NEGATIVO:
- Seja EXTRA emp√°tico e acolhedor
- Ou√ßa ativamente e valide os sentimentos
- Ofere√ßa ajuda IMEDIATA e CONCRETA
` : ''}

üîß FERRAMENTAS DISPON√çVEIS:
1. buscar_trilhas_disponiveis - Lista trilhas
2. iniciar_trilha - Inicia trilha espec√≠fica
3. registrar_feedback - Registra feedback
4. busca_documentos - Busca documentos

üìã REGRA DE OURO:
- Seja PROATIVO, n√£o reativo
- ANTECIPE necessidades do colaborador
- N√ÉO seja apenas um "respondedor de perguntas"
- SEJA um assistente que FAZ acontecer!

üì± FORMATO:
- Use emojis para humanizar
- Respostas curtas e objetivas
- Quebre informa√ß√µes longas em partes`;

// Retornar
return {
  systemMessage: {
    role: 'system',
    content: systemContent
  },
  userMessage: {
    role: 'user',
    content: messageText
  },
  historyMessages: conversationHistory,
  sentimento: sentimento,
  intensidade: intensidade
};

