const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Credenciais do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function verificarUsuarioLogado() {
  try {
    console.log('üîç Verificando usu√°rio logado...');
    
    // ID do usu√°rio que aparece nos logs
    const userId = '4ab6c765-bcfc-4280-84cd-3190fcf881c2';
    
    console.log(`üìã Buscando dados do usu√°rio: ${userId}`);
    
    // Buscar dados do usu√°rio
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (error) {
      console.error('‚ùå Erro ao buscar usu√°rio:', error);
      return;
    }
    
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Dados do usu√°rio encontrados:');
    console.log('üìã Informa√ß√µes pessoais:');
    console.log(`   ‚Ä¢ Nome: ${user.name}`);
    console.log(`   ‚Ä¢ Email: ${user.email}`);
    console.log(`   ‚Ä¢ Telefone: ${user.phone}`);
    console.log(`   ‚Ä¢ Status: ${user.status}`);
    
    console.log('üè¢ Informa√ß√µes profissionais:');
    console.log(`   ‚Ä¢ Cargo: ${user.position}`);
    console.log(`   ‚Ä¢ Departamento: ${user.department}`);
    console.log(`   ‚Ä¢ Data de in√≠cio: ${user.start_date}`);
    console.log(`   ‚Ä¢ Status do onboarding: ${user.onboarding_status}`);
    
    console.log('üë• Relacionamentos:');
    console.log(`   ‚Ä¢ Gestor ID: ${user.gestor_id}`);
    console.log(`   ‚Ä¢ Buddy ID: ${user.buddy_id}`);
    
    console.log('üè¢ Tenant:');
    console.log(`   ‚Ä¢ Tenant ID: ${user.tenant_id}`);
    
    // Buscar informa√ß√µes do gestor se existir
    if (user.gestor_id) {
      console.log('\nüë®‚Äçüíº Buscando dados do gestor...');
      const { data: gestor, error: gestorError } = await supabase
        .from('users')
        .select('name, position, email')
        .eq('id', user.gestor_id)
        .single();
      
      if (gestorError) {
        console.log('‚ö†Ô∏è Erro ao buscar gestor:', gestorError.message);
      } else if (gestor) {
        console.log(`   ‚Ä¢ Nome do gestor: ${gestor.name}`);
        console.log(`   ‚Ä¢ Cargo do gestor: ${gestor.position}`);
        console.log(`   ‚Ä¢ Email do gestor: ${gestor.email}`);
      }
    }
    
    // Buscar informa√ß√µes do buddy se existir
    if (user.buddy_id) {
      console.log('\nü§ù Buscando dados do buddy...');
      const { data: buddy, error: buddyError } = await supabase
        .from('users')
        .select('name, position, email')
        .eq('id', user.buddy_id)
        .single();
      
      if (buddyError) {
        console.log('‚ö†Ô∏è Erro ao buscar buddy:', buddyError.message);
      } else if (buddy) {
        console.log(`   ‚Ä¢ Nome do buddy: ${buddy.name}`);
        console.log(`   ‚Ä¢ Cargo do buddy: ${buddy.position}`);
        console.log(`   ‚Ä¢ Email do buddy: ${buddy.email}`);
      }
    }
    
    // Verificar se h√° trilhas associadas
    console.log('\nüìö Verificando trilhas do usu√°rio...');
    const { data: trilhas, error: trilhasError } = await supabase
      .from('user_trails')
      .select('trail_id, status, progress')
      .eq('user_id', userId);
    
    if (trilhasError) {
      console.log('‚ö†Ô∏è Erro ao buscar trilhas:', trilhasError.message);
    } else if (trilhas && trilhas.length > 0) {
      console.log(`   ‚Ä¢ Total de trilhas: ${trilhas.length}`);
      trilhas.forEach((trilha, index) => {
        console.log(`   ‚Ä¢ Trilha ${index + 1}: ID ${trilha.trail_id}, Status: ${trilha.status}, Progresso: ${trilha.progress}%`);
      });
    } else {
      console.log('   ‚Ä¢ Nenhuma trilha encontrada');
    }
    
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

verificarUsuarioLogado();
