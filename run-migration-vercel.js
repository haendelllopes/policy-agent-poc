// ============================================
// SCRIPT: Executar Migra√ß√£o via Vercel Cron
// Arquivo: run-migration-vercel.js
// Descri√ß√£o: Executa migra√ß√£o via endpoint de cron do Vercel
// ============================================

const axios = require('axios');

const BASE_URL = 'https://policy-agent-g9ij64jya-haendelllopes-projects.vercel.app';
const CRON_SECRET = process.env.CRON_SECRET || 'your_cron_secret_here';

async function runMigrationViaCron() {
    try {
        console.log('üöÄ Executando migra√ß√£o via Vercel Cron...');
        console.log('üåê URL:', BASE_URL);
        
        // 1. Testar se o sistema est√° funcionando
        console.log('üß™ Testando sistema proativo...');
        try {
            const testResponse = await axios.get(`${BASE_URL}/api/cron/monitoramento-continuo`, {
                headers: {
                    'x-cron-secret': CRON_SECRET
                }
            });
            
            if (testResponse.status === 200) {
                console.log('‚úÖ Sistema proativo funcionando!');
                console.log('üìä Resposta:', testResponse.data);
            } else {
                console.log('‚ö†Ô∏è Sistema retornou status:', testResponse.status);
            }
        } catch (error) {
            if (error.response?.status === 401) {
                console.log('‚ö†Ô∏è Erro de autentica√ß√£o - CRON_SECRET pode estar incorreto');
                console.log('üí° Configure o CRON_SECRET nas vari√°veis de ambiente do Vercel');
            } else {
                console.log('‚ùå Erro ao testar sistema:', error.message);
            }
        }
        
        // 2. Executar an√°lise hor√°ria (que pode inserir dados)
        console.log('‚è∞ Executando an√°lise hor√°ria...');
        try {
            const hourlyResponse = await axios.get(`${BASE_URL}/api/cron/analise-horaria`, {
                headers: {
                    'x-cron-secret': CRON_SECRET
                }
            });
            
            if (hourlyResponse.status === 200) {
                console.log('‚úÖ An√°lise hor√°ria executada!');
                console.log('üìä Resposta:', hourlyResponse.data);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Erro na an√°lise hor√°ria:', error.response?.data?.message || error.message);
        }
        
        // 3. Executar relat√≥rio di√°rio
        console.log('üìÖ Executando relat√≥rio di√°rio...');
        try {
            const dailyResponse = await axios.get(`${BASE_URL}/api/cron/relatorio-diario`, {
                headers: {
                    'x-cron-secret': CRON_SECRET
                }
            });
            
            if (dailyResponse.status === 200) {
                console.log('‚úÖ Relat√≥rio di√°rio executado!');
                console.log('üìä Resposta:', dailyResponse.data);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Erro no relat√≥rio di√°rio:', error.response?.data?.message || error.message);
        }
        
        // 4. Testar endpoint de m√©tricas do dashboard
        console.log('üìä Testando endpoint de m√©tricas...');
        try {
            const metricsResponse = await axios.get(`${BASE_URL}/api/dashboard/metrics/5978f911-738b-4aae-802a-f037fdac2e64`);
            
            if (metricsResponse.status === 200) {
                console.log('‚úÖ Endpoint de m√©tricas funcionando!');
                console.log('üìà Dados:', metricsResponse.data);
            } else {
                console.log('‚ö†Ô∏è Endpoint retornou status:', metricsResponse.status);
            }
        } catch (error) {
            if (error.response?.status === 401) {
                console.log('‚ö†Ô∏è Endpoint requer autentica√ß√£o');
            } else {
                console.log('‚ùå Erro no endpoint de m√©tricas:', error.message);
            }
        }
        
        console.log('üéâ Migra√ß√£o via cron conclu√≠da!');
        console.log('üìä Sistema proativo deve estar funcionando com dados mock');
        
        console.log('üåê Acesse o dashboard em:');
        console.log(`   ${BASE_URL}/dashboard.html`);
        
    } catch (error) {
        console.error('‚ùå Erro durante migra√ß√£o:', error);
        console.error('üìã Detalhes do erro:', error.message);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    runMigrationViaCron();
}

module.exports = { runMigrationViaCron };











