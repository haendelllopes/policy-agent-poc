{
  "evolutionWebhookReceiver": {
    "name": "Evolution Webhook Receiver",
    "type": "n8n-nodes-base.webhook",
    "typeVersion": 1,
    "position": [100, 100],
    "parameters": {
      "path": "evolution-webhook",
      "httpMethod": "POST",
      "responseMode": "onReceived",
      "options": {}
    }
  },
  
  "processEvolutionMessage": {
    "name": "Process Evolution Message",
    "type": "n8n-nodes-base.code",
    "typeVersion": 2,
    "position": [300, 100],
    "parameters": {
      "mode": "runOnceForAllItems",
      "jsCode": "// Processar mensagem recebida da Evolution API\nconst inputData = $input.all();\nconst results = [];\n\nfor (const item of inputData) {\n  const data = item.json;\n  \n  // Verificar se é uma mensagem válida da Evolution API\n  if (data.key && data.message) {\n    const messageData = {\n      from: data.key.remoteJid.replace('@s.whatsapp.net', ''),\n      messageText: data.message.conversation || data.message.extendedTextMessage?.text || '',\n      timestamp: data.messageTimestamp,\n      messageId: data.key.id,\n      type: 'whatsapp',\n      source: 'evolution',\n      tenantId: 'f37a823e-c4af-4b1b-9e88-1d5ec65326ad' // Ajustar para tenant correto\n    };\n    \n    results.push({ json: messageData });\n  }\n}\n\nreturn results.length > 0 ? results : [{ json: {} }];"
    }
  },
  
  "sendWhatsAppEvolution": {
    "name": "Send WhatsApp via Evolution",
    "type": "n8n-nodes-base.httpRequest",
    "typeVersion": 4.1,
    "position": [1200, 300],
    "parameters": {
      "method": "POST",
      "url": "https://navigator-evolution-api.onrender.com/message/sendText/navigator-whatsapp",
      "authentication": "predefinedCredentialType",
      "nodeCredentialType": "httpHeaderAuth",
      "sendHeaders": true,
      "headerParameters": {
        "parameters": [
          {
            "name": "Content-Type",
            "value": "application/json"
          }
        ]
      },
      "sendBody": true,
      "bodyParameters": {
        "parameters": [
          {
            "name": "number",
            "value": "={{ $json.phone.replace(/[^0-9]/g, '') }}"
          },
          {
            "name": "text",
            "value": "={{ $json.message || $json.welcome || $json.resposta || $json.text }}"
          }
        ]
      },
      "options": {
        "timeout": 10000,
        "retry": {
          "enabled": true,
          "maxAttempts": 3
        }
      }
    }
  },
  
  "evolutionStatusCheck": {
    "name": "Check Evolution Status",
    "type": "n8n-nodes-base.httpRequest",
    "typeVersion": 4.1,
    "position": [1400, 100],
    "parameters": {
      "method": "GET",
      "url": "https://navigator-evolution-api.onrender.com/instance/connectionState/navigator-whatsapp",
      "authentication": "predefinedCredentialType",
      "nodeCredentialType": "httpHeaderAuth",
      "options": {
        "timeout": 5000
      }
    }
  },
  
  "pingEvolution": {
    "name": "Ping Evolution API",
    "type": "n8n-nodes-base.httpRequest",
    "typeVersion": 4.1,
    "position": [100, 400],
    "parameters": {
      "method": "GET",
      "url": "https://navigator-evolution-api.onrender.com/manager/health",
      "options": {
        "timeout": 5000
      }
    }
  },
  
  "schedulePing": {
    "name": "Schedule Ping (Keep Alive)",
    "type": "n8n-nodes-base.scheduleTrigger",
    "typeVersion": 1.2,
    "position": [100, 300],
    "parameters": {
      "rule": {
        "interval": [
          {
            "field": "minutes",
            "minutesInterval": 10
          }
        ]
      }
    }
  }
}
