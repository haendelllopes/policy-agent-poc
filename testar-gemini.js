/**
 * Testa se o Google Gemini est√° configurado e funcionando
 */

require('dotenv').config();
const { GoogleGenerativeAI } = require('@google/generative-ai');

async function testarGemini() {
  console.log('\nü§ñ TESTE DO GOOGLE GEMINI\n');
  console.log('='.repeat(60));
  
  // 1. Verificar se a API key existe
  const apiKey = process.env.GOOGLE_GEMINI_API_KEY;
  
  console.log('\n1Ô∏è‚É£  Verificando API Key...\n');
  
  if (!apiKey) {
    console.log('‚ùå GOOGLE_GEMINI_API_KEY n√£o est√° configurada no .env');
    console.log('\nüí° Configure no arquivo .env:');
    console.log('   GOOGLE_GEMINI_API_KEY=sua_chave_aqui');
    console.log('\nüìç Obtenha em: https://makersuite.google.com/app/apikey\n');
    process.exit(1);
  }
  
  console.log(`‚úÖ API Key encontrada: ${apiKey.substring(0, 10)}...${apiKey.slice(-4)}`);
  console.log(`   Comprimento: ${apiKey.length} caracteres`);
  
  // 2. Tentar inicializar o Gemini
  console.log('\n2Ô∏è‚É£  Inicializando Gemini...\n');
  
  try {
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    
    console.log('‚úÖ Gemini inicializado com sucesso');
    console.log('   Modelo: gemini-pro');
    
    // 3. Fazer uma requisi√ß√£o de teste
    console.log('\n3Ô∏è‚É£  Testando an√°lise de sentimento...\n');
    
    const prompt = `
Analise o sentimento da seguinte mensagem:

Mensagem: "Estou adorando o onboarding! Muito empolgante e inspirador! üòäüëç"

Responda APENAS em JSON v√°lido com esta estrutura:
{
  "sentimento": "muito_positivo",
  "intensidade": 0.95,
  "fatores_detectados": {
    "palavras_chave": ["adorando", "empolgante", "inspirador"],
    "tom": "empolgado",
    "indicadores": ["emoji_positivo", "ponto_exclamacao"]
  }
}
`;
    
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    console.log('‚úÖ Resposta recebida do Gemini:\n');
    console.log(text);
    
    // 4. Tentar parsear o JSON
    console.log('\n4Ô∏è‚É£  Validando resposta JSON...\n');
    
    let jsonString = text.trim();
    if (jsonString.includes('```json')) {
      jsonString = jsonString.split('```json')[1].split('```')[0];
    } else if (jsonString.includes('```')) {
      jsonString = jsonString.split('```')[1].split('```')[0];
    }
    
    const sentimentData = JSON.parse(jsonString.trim());
    
    console.log('‚úÖ JSON v√°lido parseado com sucesso!\n');
    console.log('üìä Resultado da an√°lise:');
    console.log(`   Sentimento: ${sentimentData.sentimento}`);
    console.log(`   Intensidade: ${sentimentData.intensidade}`);
    console.log(`   Tom: ${sentimentData.fatores_detectados?.tom || 'N/A'}`);
    console.log(`   Palavras-chave: ${sentimentData.fatores_detectados?.palavras_chave?.join(', ') || 'N/A'}`);
    
    console.log('\n' + '='.repeat(60));
    console.log('\nüéâ GEMINI EST√Å FUNCIONANDO PERFEITAMENTE!\n');
    console.log('üí° O sistema usar√° an√°lise inteligente com IA.\n');
    
  } catch (error) {
    console.log('\n‚ùå ERRO AO USAR GEMINI:\n');
    console.log(`   Mensagem: ${error.message}`);
    
    if (error.message.includes('API key')) {
      console.log('\nüí° SOLU√á√ÉO: Verifique se a API key est√° correta');
      console.log('   1. Acesse: https://makersuite.google.com/app/apikey');
      console.log('   2. Gere uma nova API key');
      console.log('   3. Atualize no .env: GOOGLE_GEMINI_API_KEY=nova_chave');
    } else if (error.message.includes('404')) {
      console.log('\nüí° SOLU√á√ÉO: Modelo n√£o encontrado');
      console.log('   O modelo gemini-1.5-flash-latest pode n√£o estar dispon√≠vel');
      console.log('   Experimente: gemini-pro');
    } else {
      console.log('\n‚ö†Ô∏è  Detalhes do erro:', error);
    }
    
    console.log('\nüìã Sistema usar√° FALLBACK (an√°lise simples)');
    console.log('   Funcionar√°, mas com menos precis√£o.\n');
    
    process.exit(1);
  }
}

testarGemini()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('\n‚ùå ERRO FATAL:', err.message);
    process.exit(1);
  });

