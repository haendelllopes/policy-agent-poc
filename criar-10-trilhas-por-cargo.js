/**
 * Script para criar 10 trilhas direcionadas por cargo
 * Cada trilha ter√° conte√∫do espec√≠fico e ser√° segmentada por cargo
 */

require('dotenv').config();
const { Pool } = require('pg');
const { v4: uuidv4 } = require('uuid');

async function criarTrilhasPorCargo() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false },
    connectionTimeoutMillis: 10000,
    query_timeout: 60000,
    statement_timeout: 60000
  });
  
  try {
    console.log('\nüéØ CRIANDO 10 TRILHAS DIRECIONADAS POR CARGO\n');
    console.log('='.repeat(70));
    
    const tenant_id = '5978f911-738b-4aae-802a-f037fdac2e64';
    
    // 1. Buscar cargos existentes
    console.log('üìã Buscando cargos dispon√≠veis...\n');
    const positions = await pool.query(
      'SELECT id, name FROM positions WHERE tenant_id = $1 ORDER BY name',
      [tenant_id]
    );
    
    console.log(`‚úÖ ${positions.rows.length} cargos encontrados:\n`);
    positions.rows.forEach(p => console.log(`   - ${p.name} (${p.id})`));
    console.log('');
    
    // 2. Definir trilhas por cargo
    const trilhasPorCargo = [
      {
        nome: 'Onboarding Desenvolvedor',
        descricao: 'Trilha completa de integra√ß√£o para desenvolvedores na empresa',
        cargos: ['Desenvolvedor'],
        conteudos: [
          { tipo: 'link', titulo: 'Reposit√≥rio Git da Empresa', descricao: 'Acesse o reposit√≥rio principal no GitHub', url: 'https://github.com', ordem: 1, obrigatorio: true },
          { tipo: 'documento', titulo: 'Guia de Padr√µes de C√≥digo', descricao: 'Documenta√ß√£o sobre padr√µes de c√≥digo e boas pr√°ticas', url: 'https://docs.google.com', ordem: 2, obrigatorio: true },
          { tipo: 'video', titulo: 'Arquitetura do Sistema', descricao: 'V√≠deo explicativo sobre a arquitetura', url: 'https://youtube.com', ordem: 3, obrigatorio: true },
          { tipo: 'link', titulo: 'Ambiente de Desenvolvimento', descricao: 'Configura√ß√£o do ambiente local', url: 'https://dev.example.com', ordem: 4, obrigatorio: false }
        ],
        prazo: 10
      },
      {
        nome: 'Fundamentos de An√°lise',
        descricao: 'Trilha introdut√≥ria para analistas de neg√≥cio',
        cargos: ['Analista'],
        conteudos: [
          { tipo: 'documento', titulo: 'Processo de An√°lise de Requisitos', descricao: 'Como analisar e documentar requisitos', url: 'https://docs.example.com/analise', ordem: 1, obrigatorio: true },
          { tipo: 'link', titulo: 'Ferramentas de An√°lise', descricao: 'Acesse as ferramentas de an√°lise dispon√≠veis', url: 'https://tools.example.com', ordem: 2, obrigatorio: true },
          { tipo: 'video', titulo: 'Workshop: Levantamento de Requisitos', descricao: 'Workshop online sobre levantamento', url: 'https://youtube.com/workshop', ordem: 3, obrigatorio: true },
          { tipo: 'documento', titulo: 'Templates de Documenta√ß√£o', descricao: 'Templates para documenta√ß√£o de processos', url: 'https://templates.example.com', ordem: 4, obrigatorio: false }
        ],
        prazo: 7
      },
      {
        nome: 'Lideran√ßa e Gest√£o de Equipes',
        descricao: 'Desenvolvimento de habilidades de lideran√ßa para gerentes',
        cargos: ['Gerente'],
        conteudos: [
          { tipo: 'video', titulo: 'Fundamentos de Lideran√ßa', descricao: 'Princ√≠pios b√°sicos de lideran√ßa', url: 'https://youtube.com/lideranca', ordem: 1, obrigatorio: true },
          { tipo: 'documento', titulo: 'Gest√£o de Performance', descricao: 'Como avaliar e desenvolver pessoas', url: 'https://docs.example.com/performance', ordem: 2, obrigatorio: true },
          { tipo: 'link', titulo: 'Ferramentas de Gest√£o', descricao: 'Dashboard de gest√£o de equipes', url: 'https://gestao.example.com', ordem: 3, obrigatorio: true },
          { tipo: 'video', titulo: 'Coaching e Mentoria', descricao: 'T√©cnicas de coaching para equipes', url: 'https://youtube.com/coaching', ordem: 4, obrigatorio: false }
        ],
        prazo: 14
      },
      {
        nome: 'Coordena√ß√£o de Projetos',
        descricao: 'Trilha para coordenadores de projetos',
        cargos: ['Coordenador'],
        conteudos: [
          { tipo: 'documento', titulo: 'Metodologias √Ågeis', descricao: 'Scrum, Kanban e outras metodologias', url: 'https://docs.example.com/agile', ordem: 1, obrigatorio: true },
          { tipo: 'link', titulo: 'Ferramentas de Projeto', descricao: 'Jira, Trello e outras ferramentas', url: 'https://project.example.com', ordem: 2, obrigatorio: true },
          { tipo: 'video', titulo: 'Planejamento de Projetos', descricao: 'Como planejar e executar projetos', url: 'https://youtube.com/planning', ordem: 3, obrigatorio: true }
        ],
        prazo: 10
      },
      {
        nome: 'Supervis√£o Operacional',
        descricao: 'Trilha para supervisores',
        cargos: ['Supervisor'],
        conteudos: [
          { tipo: 'documento', titulo: 'Opera√ß√µes do Dia a Dia', descricao: 'Rotinas operacionais', url: 'https://docs.example.com/ops', ordem: 1, obrigatorio: true },
          { tipo: 'link', titulo: 'Dashboard Operacional', descricao: 'Acompanhamento de m√©tricas', url: 'https://ops.example.com', ordem: 2, obrigatorio: true },
          { tipo: 'video', titulo: 'Resolu√ß√£o de Problemas', descricao: 'Como lidar com problemas operacionais', url: 'https://youtube.com/troubleshooting', ordem: 3, obrigatorio: true }
        ],
        prazo: 7
      },
      {
        nome: 'Especializa√ß√£o T√©cnica',
        descricao: 'Trilha para especialistas',
        cargos: ['Especialista'],
        conteudos: [
          { tipo: 'documento', titulo: 'Dom√≠nio T√©cnico Avan√ßado', descricao: 'Conceitos avan√ßados da √°rea', url: 'https://docs.example.com/advanced', ordem: 1, obrigatorio: true },
          { tipo: 'link', titulo: 'Biblioteca T√©cnica', descricao: 'Recursos t√©cnicos avan√ßados', url: 'https://tech.example.com', ordem: 2, obrigatorio: true },
          { tipo: 'video', titulo: 'Workshops T√©cnicos', descricao: 'V√≠deos de workshops t√©cnicos', url: 'https://youtube.com/tech', ordem: 3, obrigatorio: true }
        ],
        prazo: 14
      },
      {
        nome: 'Onboarding Geral',
        descricao: 'Trilha geral para todos os colaboradores',
        cargos: ['Desenvolvedor', 'Analista', 'Gerente', 'Coordenador', 'Supervisor', 'Especialista'],
        conteudos: [
          { tipo: 'documento', titulo: 'Cultura e Valores da Empresa', descricao: 'Conhe√ßa nossa cultura e valores', url: 'https://docs.example.com/cultura', ordem: 1, obrigatorio: true },
          { tipo: 'video', titulo: 'Boas-vindas da Diretoria', descricao: 'Mensagem de boas-vindas', url: 'https://youtube.com/welcome', ordem: 2, obrigatorio: true },
          { tipo: 'link', titulo: 'Benef√≠cios e Pol√≠ticas', descricao: 'Descubra seus benef√≠cios', url: 'https://benefits.example.com', ordem: 3, obrigatorio: true },
          { tipo: 'documento', titulo: 'Manual do Colaborador', descricao: 'Manual completo do colaborador', url: 'https://docs.example.com/manual', ordem: 4, obrigatorio: true }
        ],
        prazo: 5
      },
      {
        nome: 'Seguran√ßa e Compliance',
        descricao: 'Trilha obrigat√≥ria sobre seguran√ßa',
        cargos: ['Desenvolvedor', 'Analista', 'Gerente'],
        conteudos: [
          { tipo: 'documento', titulo: 'Pol√≠tica de Seguran√ßa', descricao: 'Pol√≠ticas e procedimentos de seguran√ßa', url: 'https://docs.example.com/security', ordem: 1, obrigatorio: true },
          { tipo: 'video', titulo: 'Treinamento de Seguran√ßa', descricao: 'Treinamento sobre seguran√ßa da informa√ß√£o', url: 'https://youtube.com/security', ordem: 2, obrigatorio: true },
          { tipo: 'link', titulo: 'Certifica√ß√£o de Seguran√ßa', descricao: 'Realize o teste de seguran√ßa', url: 'https://security.example.com', ordem: 3, obrigatorio: true }
        ],
        prazo: 3
      },
      {
        nome: 'Comunica√ß√£o e Colabora√ß√£o',
        descricao: 'Desenvolvimento de habilidades de comunica√ß√£o',
        cargos: ['Gerente', 'Coordenador', 'Supervisor'],
        conteudos: [
          { tipo: 'video', titulo: 'Comunica√ß√£o Eficaz', descricao: 'T√©cnicas de comunica√ß√£o no ambiente corporativo', url: 'https://youtube.com/comunicacao', ordem: 1, obrigatorio: true },
          { tipo: 'documento', titulo: 'Ferramentas de Colabora√ß√£o', descricao: 'Slack, Teams e outras ferramentas', url: 'https://docs.example.com/collab', ordem: 2, obrigatorio: true },
          { tipo: 'link', titulo: 'Boas Pr√°ticas de Colabora√ß√£o', descricao: 'Dicas para trabalho em equipe', url: 'https://collab.example.com', ordem: 3, obrigatorio: true }
        ],
        prazo: 7
      },
      {
        nome: 'Inova√ß√£o e Tend√™ncias',
        descricao: 'Fique atualizado com as √∫ltimas tend√™ncias',
        cargos: ['Desenvolvedor', 'Analista', 'Especialista'],
        conteudos: [
          { tipo: 'link', titulo: 'Newsletter de Tecnologia', descricao: 'Fique por dentro das novidades', url: 'https://news.example.com', ordem: 1, obrigatorio: false },
          { tipo: 'video', titulo: 'Tend√™ncias do Mercado', descricao: 'An√°lise das principais tend√™ncias', url: 'https://youtube.com/trends', ordem: 2, obrigatorio: false },
          { tipo: 'documento', titulo: 'Ecossistema de Inova√ß√£o', descricao: 'Conhe√ßa nosso ecossistema', url: 'https://docs.example.com/innovation', ordem: 3, obrigatorio: false }
        ],
        prazo: 0 // Sem prazo definido
      }
    ];
    
    console.log(`üìö Criando ${trilhasPorCargo.length} trilhas...\n`);
    
    // 3. Buscar pr√≥xima ordem dispon√≠vel
    const ordemResult = await pool.query(`
      SELECT COALESCE(MAX(ordem), 0) + 1 as proxima_ordem
      FROM trilhas
      WHERE tenant_id = $1
    `, [tenant_id]);
    let ordem_atual = parseInt(ordemResult.rows[0].proxima_ordem);
    
    // 4. Inserir trilhas e conte√∫dos
    for (const trilha of trilhasPorCargo) {
      const trilha_id = uuidv4();
      
      // Inserir trilha
      await pool.query(`
        INSERT INTO trilhas (id, tenant_id, nome, descricao, prazo_dias, ordem, ativo, segmentacao_tipo, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, $6, true, 'cargos', NOW(), NOW())
      `, [
        trilha_id,
        tenant_id,
        trilha.nome,
        trilha.descricao,
        trilha.prazo || 7,
        ordem_atual++
      ]);
      
      console.log(`‚úÖ Trilha criada: ${trilha.nome}`);
      
      // Inserir conte√∫dos
      for (const conteudo of trilha.conteudos) {
        const conteudo_id = uuidv4();
        
        await pool.query(`
          INSERT INTO trilha_conteudos (id, trilha_id, tipo, titulo, descricao, url, ordem, obrigatorio, created_at, updated_at)
          VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW())
          ON CONFLICT (id) DO NOTHING
        `, [
          conteudo_id,
          trilha_id,
          conteudo.tipo,
          conteudo.titulo,
          conteudo.descricao,
          conteudo.url,
          conteudo.ordem,
          conteudo.obrigatorio
        ]);
      }
      
      console.log(`   üìÑ ${trilha.conteudos.length} conte√∫dos adicionados`);
      
      // Associar a cargo(s)
      for (const cargoNome of trilha.cargos) {
        const cargo = positions.rows.find(p => p.name === cargoNome);
        
        if (cargo) {
          await pool.query(`
            INSERT INTO trilha_segmentacao (id, trilha_id, position_id, incluir, created_at)
            VALUES (gen_random_uuid(), $1, $2, true, NOW())
          `, [trilha_id, cargo.id]);
          
          console.log(`   üëî Associada ao cargo: ${cargoNome}`);
        }
      }
      
      console.log('');
    }
    
    console.log('='.repeat(70));
    console.log('\nüéâ TRILHAS CRIADAS COM SUCESSO!\n');
    console.log(`‚úÖ ${trilhasPorCargo.length} trilhas criadas`);
    console.log('‚úÖ Conte√∫dos adicionados');
    console.log('‚úÖ Segmenta√ß√£o por cargo configurada');
    console.log('\nüìä As trilhas agora est√£o dispon√≠veis no sistema e ser√£o direcionadas automaticamente pelo chat!\n');
    
  } catch (error) {
    console.error('\n‚ùå ERRO:', error.message);
    console.error('\nDetalhes:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

criarTrilhasPorCargo()
  .then(() => process.exit(0))
  .catch(err => {
    console.error(err);
    process.exit(1);
  });

