#!/usr/bin/env node

/**
 * Script de Teste - Fase 4.5 - Aprimoramento de Anota√ß√µes
 * Testa todos os endpoints implementados
 */

const axios = require('axios');

// Configura√ß√µes
const BASE_URL = 'https://navigator-gules.vercel.app';
const TENANT_ID = '5978f911-738b-4aae-802a-f037fdac2e64';
const COLABORADOR_ID = 'a1b2c3d4-e5f6-7890-abcd-ef1234567890';

// Cores para console
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Teste 1: Criar anota√ß√£o com urg√™ncia cr√≠tica
async function testarUrgenciaCritica() {
  log('\nüß™ TESTE 1: Urg√™ncia Cr√≠tica', 'blue');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/agente/anotacoes`, {
      colaborador_id: COLABORADOR_ID,
      tipo: 'problema_tecnico',
      titulo: 'Sistema n√£o funciona h√° 3 dias!',
      anotacao: 'N√£o consigo acessar o sistema h√° 3 dias. Isso est√° impedindo meu trabalho completamente.',
      urgencia: 'critica',
      categoria: 'tecnico',
      subcategoria: 'acesso_sistema',
      tags: ['sistema-indisponivel', 'acesso-bloqueado', 'urgente', 'bloqueante', 'ti'],
      acao_sugerida: 'Escalar para TI imediatamente',
      impacto_estimado: 'muito_alto',
      metadata: {
        from: '556291708483',
        sentimento: 'muito_negativo',
        intensidade: 0.9
      }
    }, {
      headers: {
        'Content-Type': 'application/json',
        'x-tenant-id': TENANT_ID
      }
    });

    if (response.status === 201) {
      log('‚úÖ Anota√ß√£o cr√≠tica criada com sucesso', 'green');
      log(`üìù ID: ${response.data.anotacao.id}`, 'green');
      return response.data.anotacao.id;
    }
  } catch (error) {
    log(`‚ùå Erro ao criar anota√ß√£o cr√≠tica: ${error.message}`, 'red');
    if (error.response) {
      log(`üìä Status: ${error.response.status}`, 'red');
      log(`üìä Data: ${JSON.stringify(error.response.data)}`, 'red');
    }
  }
  return null;
}

// Teste 2: Alertar urg√™ncia cr√≠tica
async function testarAlertaUrgencia(anotacaoId) {
  log('\nüß™ TESTE 2: Alerta de Urg√™ncia Cr√≠tica', 'blue');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/agente/alertas/urgencia-critica`, {
      anotacao_id: anotacaoId,
      tipo: 'problema_tecnico',
      urgencia: 'critica',
      categoria: 'tecnico',
      mensagem: 'Sistema n√£o funciona h√° 3 dias!',
      colaborador_id: COLABORADOR_ID,
      acao_sugerida: 'Escalar para TI imediatamente',
      timestamp: new Date().toISOString()
    }, {
      headers: {
        'Content-Type': 'application/json',
        'x-tenant-id': TENANT_ID
      }
    });

    if (response.status === 200) {
      log('‚úÖ Alerta de urg√™ncia enviado com sucesso', 'green');
      log(`üìä Admins notificados: ${response.data.notified}`, 'green');
      log(`üÜî Alerta ID: ${response.data.alerta_id}`, 'green');
    }
  } catch (error) {
    log(`‚ùå Erro ao enviar alerta: ${error.message}`, 'red');
    if (error.response) {
      log(`üìä Status: ${error.response.status}`, 'red');
      log(`üìä Data: ${JSON.stringify(error.response.data)}`, 'red');
    }
  }
}

// Teste 3: Criar ticket autom√°tico
async function testarCriarTicket() {
  log('\nüß™ TESTE 3: Criar Ticket Autom√°tico', 'blue');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/agente/tickets`, {
      titulo: '[URGENTE] Sistema indispon√≠vel h√° 3 dias',
      descricao: 'Colaborador n√£o consegue acessar o sistema h√° 3 dias, impedindo o trabalho.',
      urgencia: 'CR√çTICA',
      categoria: 'tecnico',
      colaborador_id: COLABORADOR_ID,
      prioridade: 'alta',
      anotacao_id: 'test-ticket-' + Date.now()
    }, {
      headers: {
        'Content-Type': 'application/json',
        'x-tenant-id': TENANT_ID
      }
    });

    if (response.status === 201) {
      log('‚úÖ Ticket criado com sucesso', 'green');
      log(`üé´ Ticket ID: ${response.data.ticket.id}`, 'green');
    }
  } catch (error) {
    log(`‚ùå Erro ao criar ticket: ${error.message}`, 'red');
    if (error.response) {
      log(`üìä Status: ${error.response.status}`, 'red');
      log(`üìä Data: ${JSON.stringify(error.response.data)}`, 'red');
    }
  }
}

// Teste 4: Buscar anota√ß√µes dos √∫ltimos dias
async function testarBuscarAnotacoes() {
  log('\nüß™ TESTE 4: Buscar Anota√ß√µes dos √öltimos Dias', 'blue');
  
  try {
    const response = await axios.get(`${BASE_URL}/api/agente/anotacoes/ultimos-dias?dias=7&limit=10`, {
      headers: {
        'x-tenant-id': TENANT_ID
      }
    });

    if (response.status === 200) {
      log('‚úÖ Anota√ß√µes buscadas com sucesso', 'green');
      log(`üìä Total: ${response.data.total} anota√ß√µes`, 'green');
      log(`üìÖ Per√≠odo: ${response.data.periodo_dias} dias`, 'green');
    }
  } catch (error) {
    log(`‚ùå Erro ao buscar anota√ß√µes: ${error.message}`, 'red');
    if (error.response) {
      log(`üìä Status: ${error.response.status}`, 'red');
      log(`üìä Data: ${JSON.stringify(error.response.data)}`, 'red');
    }
  }
}

// Teste 5: Salvar melhoria sugerida
async function testarSalvarMelhoria() {
  log('\nüß™ TESTE 5: Salvar Melhoria Sugerida', 'blue');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/agente/melhorias`, {
      titulo: 'Dividir Trilha de Compliance em 2 m√≥dulos',
      descricao: 'Dividir em "Compliance B√°sico" (conceitos) e "Compliance Avan√ßado" (aplica√ß√£o pr√°tica) para reduzir sensa√ß√£o de sobrecarga',
      categoria: 'conteudo',
      prioridade: 'alta',
      impacto_estimado: 'alto',
      esforco_estimado: 'medio',
      evidencias: [
        '15 reclama√ß√µes sobre dura√ß√£o',
        'Sentimento m√©dio: negativo (0.68)',
        '30% dos colaboradores afetados'
      ],
      metricas_sucesso: [
        'Redu√ß√£o de 50% nas reclama√ß√µes sobre dura√ß√£o',
        'Aumento de 20% na taxa de conclus√£o',
        'Melhoria no sentimento m√©dio para neutro/positivo'
      ],
      metadata: {
        gerado_por: 'analise_automatica_gpt4',
        data_analise: new Date().toISOString(),
        periodo_analise: '7_dias'
      }
    }, {
      headers: {
        'Content-Type': 'application/json',
        'x-tenant-id': TENANT_ID
      }
    });

    if (response.status === 201) {
      log('‚úÖ Melhoria salva com sucesso', 'green');
      log(`üí° Melhoria ID: ${response.data.melhoria.id}`, 'green');
    }
  } catch (error) {
    log(`‚ùå Erro ao salvar melhoria: ${error.message}`, 'red');
    if (error.response) {
      log(`üìä Status: ${error.response.status}`, 'red');
      log(`üìä Data: ${JSON.stringify(error.response.data)}`, 'red');
    }
  }
}

// Teste 6: Criar anota√ß√£o proativa
async function testarAnotacaoProativa() {
  log('\nüß™ TESTE 6: Criar Anota√ß√£o Proativa', 'blue');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/agente/anotacoes/proativa`, {
      colaborador_id: COLABORADOR_ID,
      tipo: 'padrao_identificado',
      titulo: 'Colaborador Jo√£o inativo h√° 8 dias',
      anotacao: 'Jo√£o est√° h√° 8 dias sem interagir. Trilha atual: 35% conclu√≠da.',
      tags: ['risco-evasao', 'inatividade-critica', 'trilha-incompleta', 'sentimento-negativo', 'intervencao-urgente'],
      urgencia: 'critica',
      categoria: 'engajamento',
      subcategoria: 'risco_evasao',
      acao_sugerida: 'Contato URGENTE do gestor/RH para entender situa√ß√£o',
      impacto_estimado: 'alto',
      insights: 'Jo√£o pode estar enfrentando dificuldades n√£o comunicadas. A combina√ß√£o de inatividade prolongada e sentimento negativo indica alto risco de desengajamento permanente.',
      acoes_especificas: [
        'Ligar para Jo√£o hoje para entender situa√ß√£o',
        'Oferecer reuni√£o 1:1 com gestor',
        'Propor ajuste de trilhas ou suporte personalizado'
      ],
      prioridade_revisao: 'urgente',
      metadata: {
        dias_sem_interacao: 8,
        progresso_trilha_atual: 35,
        ultimo_sentimento: 'negativo',
        padrao_detectado: 'risco_evasao'
      },
      gerado_automaticamente: true
    }, {
      headers: {
        'Content-Type': 'application/json',
        'x-tenant-id': TENANT_ID
      }
    });

    if (response.status === 201) {
      log('‚úÖ Anota√ß√£o proativa criada com sucesso', 'green');
      log(`ü§ñ Anota√ß√£o ID: ${response.data.anotacao.id}`, 'green');
    }
  } catch (error) {
    log(`‚ùå Erro ao criar anota√ß√£o proativa: ${error.message}`, 'red');
    if (error.response) {
      log(`üìä Status: ${error.response.status}`, 'red');
      log(`üìä Data: ${JSON.stringify(error.response.data)}`, 'red');
    }
  }
}

// Fun√ß√£o principal
async function executarTodosOsTestes() {
  log('üöÄ INICIANDO TESTES DA FASE 4.5', 'blue');
  log('================================', 'blue');
  
  // Teste 1: Criar anota√ß√£o cr√≠tica
  const anotacaoId = await testarUrgenciaCritica();
  
  // Teste 2: Alerta de urg√™ncia (se anota√ß√£o foi criada)
  if (anotacaoId) {
    await testarAlertaUrgencia(anotacaoId);
  }
  
  // Teste 3: Criar ticket
  await testarCriarTicket();
  
  // Teste 4: Buscar anota√ß√µes
  await testarBuscarAnotacoes();
  
  // Teste 5: Salvar melhoria
  await testarSalvarMelhoria();
  
  // Teste 6: Anota√ß√£o proativa
  await testarAnotacaoProativa();
  
  log('\nüéâ TESTES CONCLU√çDOS!', 'green');
  log('====================', 'green');
  log('‚úÖ Verifique os logs do servidor para confirmar funcionamento', 'yellow');
  log('‚úÖ Todos os endpoints est√£o prontos para N8N', 'yellow');
}

// Executar se chamado diretamente
if (require.main === module) {
  executarTodosOsTestes().catch(error => {
    log(`‚ùå Erro geral: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = {
  testarUrgenciaCritica,
  testarAlertaUrgencia,
  testarCriarTicket,
  testarBuscarAnotacoes,
  testarSalvarMelhoria,
  testarAnotacaoProativa
};




